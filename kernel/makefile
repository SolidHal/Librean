ifndef KERNEL_MK
KERNEL_MK := 1

ifndef PRAWNOS_ROOT
PRAWNOS_ROOT := $(shell git rev-parse --show-toplevel)
endif

include $(PRAWNOS_ROOT)/scripts/BuildScripts/BuildCommon.mk
include $(PRAWNOS_ROOT)/initramfs/makefile

### TARGETED VARS ###
KERNEL_PATCHED := $(PRAWNOS_KERNEL_BUILD)/.kernel_$(KERNEL_TYPE)_patched
KERNEL_EXTRACTED := $(PRAWNOS_KERNEL_BUILD)/.kernel_$(KERNEL_TYPE)_extracted
KERNEL_CONFIG_GENERATED := $(PRAWNOS_KERNEL_BUILD)/.kernel_$(KERNEL_TYPE)_config_generated

KERNEL_SHARED_RESOURCES := $(PRAWNOS_KERNEL)/resources/shared
KERNEL_RESOURCES := $(PRAWNOS_KERNEL)/resources/$(TARGET)
KERNEL_PATCHES := $(PRAWNOS_KERNEL)/patches/$(TARGET)

KERNEL_BUILD_LOG := $(PRAWNOS_BUILD_LOGS)/kernel-log-$(TARGET).txt

KERNEL_LIBRE_CONFIG := $(KERNEL_RESOURCES)/libre-config
KERNEL_LIBRE_URL := https://www.linux-libre.fsfla.org/pub/linux-libre/releases/$(KVER)-gnu/
KERNEL_LIBRE_BASENAME := linux-libre-$(KVER)-gnu.tar.lz
KERNEL_LIBRE_TAR := $(PRAWNOS_BUILD_SOURCES)/$(KERNEL_LIBRE_BASENAME)
KERNEL_LIBRE_TAR_SIGNATURE_BASENAME := $(KERNEL_LIBRE_BASENAME).sign
KERNEL_LIBRE_TAR_SIGNATURE := $(PRAWNOS_BUILD_SOURCES)/$(KERNEL_LIBRE_TAR_SIGNATURE_BASENAME)
KERNEL_LIBRE_TAR_SIGNATURE_TARGET_BASENAME := $(KERNEL_LIBRE_BASENAME)
KERNEL_LIBRE_TAR_SIGNATURE_TARGET := $(PRAWNOS_BUILD_SOURCES)/$(KERNEL_LIBRE_TAR_SIGNATURE_TARGET_BASENAME)
KERNEL_LIBRE_SOURCE_NAME := linux-$(KVER)-libre-$(TARGET)
KERNEL_LIBRE_PUBKEY := $(KERNEL_SHARED_RESOURCES)/linux-libre-signing-key.gpg

# hybrid kernel: Blobby wifi and bluetooth in an otherwise libre kernel
# As ATH9k devices and 2.4GHZ wifi become less commonly available, and no new wifi adapters with fully open
# source firmware and drivers have become available, its hard to stick to using blob-free wifi
# Let users compromise by re-adding blobby wifi to their otherwise blob-free kernel
KERNEL_HYBRID_CONFIG := $(PRAWNOS_BUILD)/hybrid-kernel-config
KERNEL_HYBRID_CONFIG_FRAGMENT := $(KERNEL_RESOURCES)/hybrid-config.fragment
KERNEL_HYBRID_SOURCE_NAME := linux-$(KVER)-hybrid-$(TARGET)

# Blobby kernel vars
KERNEL_BLOBBY_CONFIG := $(KERNEL_RESOURCES)/blobby-config
KERNEL_BLOBBY_URL := https://cdn.kernel.org/pub/linux/kernel/v6.x/
KERNEL_BLOBBY_BASENAME := linux-$(KVER).tar.xz
KERNEL_BLOBBY_TAR := $(PRAWNOS_BUILD_SOURCES)/$(KERNEL_BLOBBY_BASENAME)
KERNEL_BLOBBY_TAR_SIGNATURE_TARGET_BASENAME := linux-$(KVER).tar
KERNEL_BLOBBY_TAR_SIGNATURE_BASENAME := $(KERNEL_BLOBBY_TAR_SIGNATURE_TARGET_BASENAME).sign
KERNEL_BLOBBY_TAR_SIGNATURE := $(PRAWNOS_BUILD_SOURCES)/$(KERNEL_BLOBBY_TAR_SIGNATURE_BASENAME)
KERNEL_BLOBBY_TAR_SIGNATURE_TARGET := $(PRAWNOS_BUILD_SOURCES)/$(KERNEL_BLOBBY_TAR_SIGNATURE_TARGET_BASENAME)
KERNEL_BLOBBY_SOURCE_NAME := linux-$(KVER)-blobby-$(TARGET)
KERNEL_BLOBBY_PUBKEY := $(KERNEL_SHARED_RESOURCES)/blobby-linux-signing-key.gpg

ATH9K_EXTRACTED := $(PRAWNOS_ATH9K_BUILD)/.ath9k_extracted
ATH9K_TAR := $(KERNEL_SHARED_RESOURCES)/open-ath9k-htc-firmware.tar.gz
ATH9K := open-ath9k-htc-firmware
ATH9K_9271_FW := $(PRAWNOS_ATH9K_BUILD)/target_firmware/htc_9271.fw
ATH9K_7010_FW := $(PRAWNOS_ATH9K_BUILD)/target_firmware/htc_7010.fw
ATH9K_BUILT := $(ATH9K_9271_FW)
ATH9K_BUILD_LOG := $(PRAWNOS_BUILD_LOGS)/ath9k-log.txt

KERNEL_ATH9K_FIRMWARES := $(PRAWNOS_KERNEL_BUILD)/open-ath9k-firmware

KERNEL_ATH9K_INSTALLED := $(KERNEL_ATH9K_FIRMWARES)/htc_9271.fw

### PHONY RULES
.PHONY: kernel
kernel: $(PRAWNOS_KERNEL_BUILT)

.PHONY: ath9k
ath9k: $(ATH9K_BUILT)

.PHONY: patch_kernel
patch_kernel: $(KERNEL_PATCHED)

.PHONY: extract_kernel
extract_kernel: $(KERNEL_EXTRACTED)

.PHONY: extract_ath9k
extract_ath9k: $(ATH9K_EXTRACTED)

.PHONY: kernel_image_package
kernel_image_package: $(PRAWNOS_KERNEL_BUILT)
	$(MAKE) -C $(PRAWNOS_KERNEL_PACKAGE_IMAGE)

.PHONY: kernel_image_package_install
kernel_image_package_install: kernel_image_package
	$(MAKE) -C $(PRAWNOS_KERNEL_PACKAGE_IMAGE) install INSTALL_TARGET=$(PRAWNOS_BUILD)


.PHONY: kernel_config
kernel_config: $(KERNEL_PATCHED) $(KERNEL_CONFIG_GENERATED)
	$(PRAWNOS_KERNEL_SCRIPTS_MENUCONFIG) $(KERNEL_RESOURCES) $(PRAWNOS_KERNEL_BUILD) $(TARGET) $(KERNEL_CONFIG)

### CLEAN RULES

.PHONY: clean_kernel
clean_kernel:
	rm -rf $(PRAWNOS_KERNEL_BUILD)
	$(MAKE) -C $(PRAWNOS_KERNEL_PACKAGE_IMAGE) clean

.PHONY: clean_kernel_image_package
clean_kernel_image_package:
	$(MAKE) -C $(PRAWNOS_KERNEL_PACKAGE_IMAGE) clean

.PHONY: clean_ath9k
clean_ath9k:
	rm -rf $(PRAWNOS_ATH9K_BUILD)
	$(MAKE) -C $(PRAWNOS_KERNEL_PACKAGE_IMAGE) clean

### DEVELOPER RULES

.PHONY: update_ath9k_tar
update_ath9k_tar:
	mkdir -p tmp/$(ATH9K)
	git clone --depth 1 https://github.com/qca/open-ath9k-htc-firmware.git tmp/$(ATH9K)
	cd tmp && tar czvf $(ATH9K_SOURCE) $(ATH9K)
	rm -rf tmp/

#TODO: package perf/linux-tools
.PHONY: perf
perf: $(PRAWNOS_KERNEL_BUILT)
	$(PRAWNOS_KERNEL_SCRIPTS_PERF) $(KVER) $(KERNEL_RESOURCES) $(PRAWNOS_KERNEL_BUILD) $(PRAWNOS_INITRAMFS_IMAGE) $(TARGET)

### REAL RULES

ifeq ($(KERNEL_TYPE),$(PRAWNOS_LIBRE_KERNEL))
KERNEL_CONFIG := $(KERNEL_LIBRE_CONFIG)
KERNEL_URL := $(KERNEL_LIBRE_URL)
KERNEL_BASENAME := $(KERNEL_LIBRE_BASENAME)
KERNEL_TAR := $(KERNEL_LIBRE_TAR)
KERNEL_TAR_SIGNATURE := $(KERNEL_LIBRE_TAR_SIGNATURE)
KERNEL_TAR_SIGNATURE_BASENAME := $(KERNEL_LIBRE_TAR_SIGNATURE_BASENAME)
KERNEL_TAR_SIGNATURE_TARGET := $(KERNEL_LIBRE_TAR_SIGNATURE_TARGET)
KERNEL_TAR_SIGNATURE_TARGET_BASENAME := $(KERNEL_LIBRE_TAR_SIGNATURE_TARGET_BASENAME)
KERNEL_PUBKEY := $(KERNEL_LIBRE_PUBKEY)

else ifeq ($(KERNEL_TYPE),$(PRAWNOS_HYBRID_KERNEL))
KERNEL_CONFIG := $(KERNEL_HYBRID_CONFIG)
KERNEL_URL := $(KERNEL_LIBRE_URL)
KERNEL_BASENAME := $(KERNEL_LIBRE_BASENAME)
KERNEL_TAR := $(KERNEL_LIBRE_TAR)
KERNEL_TAR_SIGNATURE := $(KERNEL_LIBRE_TAR_SIGNATURE)
KERNEL_TAR_SIGNATURE_BASENAME := $(KERNEL_LIBRE_TAR_SIGNATURE_BASENAME)
KERNEL_TAR_SIGNATURE_TARGET := $(KERNEL_LIBRE_TAR_SIGNATURE_TARGET)
KERNEL_TAR_SIGNATURE_TARGET_BASENAME := $(KERNEL_LIBRE_TAR_SIGNATURE_TARGET_BASENAME)
KERNEL_PUBKEY := $(KERNEL_LIBRE_PUBKEY)

else ifeq ($(KERNEL_TYPE),$(PRAWNOS_BLOBBY_KERNEL))
KERNEL_CONFIG := $(KERNEL_BLOBBY_CONFIG)
KERNEL_URL := $(KERNEL_BLOBBY_URL)
KERNEL_BASENAME := $(KERNEL_BLOBBY_BASENAME)
KERNEL_TAR := $(KERNEL_BLOBBY_TAR)
KERNEL_TAR_SIGNATURE := $(KERNEL_BLOBBY_TAR_SIGNATURE)
KERNEL_TAR_SIGNATURE_BASENAME := $(KERNEL_BLOBBY_TAR_SIGNATURE_BASENAME)
KERNEL_TAR_SIGNATURE_TARGET := $(KERNEL_BLOBBY_TAR_SIGNATURE_TARGET)
KERNEL_TAR_SIGNATURE_TARGET_BASENAME := $(KERNEL_BLOBBY_TAR_SIGNATURE_TARGET_BASENAME)
KERNEL_PUBKEY := $(KERNEL_BLOBBY_PUBKEY)
endif

$(KERNEL_ATH9K_FIRMWARES):
	mkdir -p $(KERNEL_ATH9K_FIRMWARES)

$(KERNEL_TAR_SIGNATURE): | $(PRAWNOS_BUILD_SOURCES)
  ifeq ($(KERNEL_TYPE),$(PRAWNOS_HYBRID_KERNEL))
	wget $(WGET_OPTS) $(KERNEL_BLOBBY_URL)/$(KERNEL_BLOBBY_TAR_SIGNATURE_BASENAME) -O $(KERNEL_BLOBBY_TAR_SIGNATURE)
  endif
	wget $(WGET_OPTS) $(KERNEL_URL)/$(KERNEL_TAR_SIGNATURE_BASENAME) -O $(KERNEL_TAR_SIGNATURE)

$(KERNEL_EXTRACTED): $(KERNEL_TAR) $(KERNEL_TAR_SIGNATURE)
## TODO: just use the git repo for arm64-rk3588 for now
  ifeq ($(TARGET),$(PRAWNOS_ARM64_RK3588_SERVER))
	git clone https://github.com/SolidHal/rk3588-kernel-libre $(PRAWNOS_BUILD)/linux-$(KVER)
	touch $(KERNEL_EXTRACTED)
  else ifeq ($(TARGET),$(PRAWNOS_ARM64_RK3588))
	git clone https://github.com/SolidHal/rk3588-kernel-libre $(PRAWNOS_BUILD)/linux-$(KVER)
	touch $(KERNEL_EXTRACTED)
  else
## we use standard linux or linux-libre sources
  ifeq ($(KERNEL_TYPE),$(PRAWNOS_LIBRE_KERNEL))
	gpg --import $(KERNEL_PUBKEY)
	gpg --verify $(KERNEL_TAR_SIGNATURE) $(KERNEL_TAR_SIGNATURE_TARGET) && \
	tar --lzip -xf $(KERNEL_TAR) -C $(PRAWNOS_BUILD) && \
	mv $(PRAWNOS_BUILD)/linux-$(KVER) $(PRAWNOS_KERNEL_BUILD) && \
	touch $(KERNEL_EXTRACTED)

  else ifeq ($(KERNEL_TYPE),$(PRAWNOS_HYBRID_KERNEL))
	gpg --import $(KERNEL_LIBRE_PUBKEY)
	gpg --import $(KERNEL_BLOBBY_PUBKEY)
	rm -rf $(PRAWNOS_BUILD)/$(KERNEL_LIBRE_SOURCE_NAME)
	rm -rf $(PRAWNOS_BUILD)/$(KERNEL_BLOBBY_SOURCE_NAME)
	rm -rf $(PRAWNOS_BUILD)/$(KERNEL_HYBRID_SOURCE_NAME)
	gpg --verify $(KERNEL_LIBRE_TAR_SIGNATURE) $(KERNEL_LIBRE_TAR_SIGNATURE_TARGET) && \
	tar --lzip -xf $(KERNEL_LIBRE_TAR) -C $(PRAWNOS_BUILD) && \
	mv $(PRAWNOS_BUILD)/linux-$(KVER) $(PRAWNOS_BUILD)/$(KERNEL_LIBRE_SOURCE_NAME) && \
	if [ ! -f $(KERNEL_BLOBBY_TAR_SIGNATURE_TARGET) ]; then xz --decompress --keep $(KERNEL_BLOBBY_TAR) ; fi ; \
	gpg --verify $(KERNEL_BLOBBY_TAR_SIGNATURE) $(KERNEL_BLOBBY_TAR_SIGNATURE_TARGET) && \
	tar -xf $(KERNEL_BLOBBY_TAR_SIGNATURE_TARGET) -C $(PRAWNOS_BUILD) && \
	mv $(PRAWNOS_BUILD)/linux-$(KVER) $(PRAWNOS_BUILD)/$(KERNEL_BLOBBY_SOURCE_NAME) && \
	cp -a $(PRAWNOS_BUILD)/$(KERNEL_LIBRE_SOURCE_NAME) $(PRAWNOS_KERNEL_BUILD) && \
	rm -rf $(PRAWNOS_KERNEL_BUILD)/drivers/net/wireless/marvell && \
	cp -a $(PRAWNOS_BUILD)/$(KERNEL_BLOBBY_SOURCE_NAME)/drivers/net/wireless/marvell $(PRAWNOS_KERNEL_BUILD)/drivers/net/wireless/ && \
	touch $(KERNEL_EXTRACTED)

  else ifeq ($(KERNEL_TYPE),$(PRAWNOS_BLOBBY_KERNEL))
	gpg --import $(KERNEL_BLOBBY_PUBKEY)
	if [ ! -f $(KERNEL_TAR_SIGNATURE_TARGET) ]; then xz --decompress --keep $(KERNEL_TAR) ; fi ; \
	gpg --verify $(KERNEL_TAR_SIGNATURE) $(KERNEL_TAR_SIGNATURE_TARGET) && \
	tar -xf $(KERNEL_TAR_SIGNATURE_TARGET) -C $(PRAWNOS_BUILD) && \
	mv $(PRAWNOS_BUILD)/linux-$(KVER) $(PRAWNOS_KERNEL_BUILD) && \
	touch $(KERNEL_EXTRACTED)
  else
	@echo "Unknown kernel type:" $(KERNEL_TYPE)
	exit 1
  endif
  endif

$(KERNEL_TAR): | $(PRAWNOS_BUILD_LOGS) $(PRAWNOS_BUILD_SOURCES)
  ifeq ($(KERNEL_TYPE),$(PRAWNOS_HYBRID_KERNEL))
	wget $(WGET_OPTS) $(KERNEL_BLOBBY_URL)/$(KERNEL_BLOBBY_BASENAME) -O $(KERNEL_BLOBBY_TAR)
  endif
	wget $(WGET_OPTS) $(KERNEL_URL)/$(KERNEL_BASENAME) -O $(KERNEL_TAR)


$(KERNEL_PATCHED): $(KERNEL_EXTRACTED)
	@echo $(PRAWNOS_KERNEL_BUILD)
	$(PRAWNOS_KERNEL_SCRIPTS_PATCH) $(KVER) $(KERNEL_PATCHES) $(PRAWNOS_KERNEL_BUILD) $(TARGET)
	touch $(KERNEL_PATCHED)

$(KERNEL_CONFIG_GENERATED): $(KERNEL_EXTRACTED)
  ifeq ($(KERNEL_TYPE),$(PRAWNOS_HYBRID_KERNEL))
	@echo Generating hybrid kernel config from libre kernel config $(KERNEL_LIBRE_CONFIG)
	rm -f $(KERNEL_HYBRID_CONFIG)
	cp $(KERNEL_LIBRE_CONFIG) $(KERNEL_HYBRID_CONFIG)
	$(PRAWNOS_KERNEL_SCRIPTS_GENERATE_CONFIG) $(KERNEL_RESOURCES) $(PRAWNOS_KERNEL_BUILD) $(TARGET) $(KERNEL_HYBRID_CONFIG) $(KERNEL_HYBRID_CONFIG_FRAGMENT)
  else
	@echo nothing to do for config for $(KERNEL_TYPE)
  endif
	touch $(KERNEL_CONFIG_GENERATED)

$(ATH9K_EXTRACTED): | $(PRAWNOS_BUILD_LOGS) $(PRAWNOS_BUILD_SOURCES) $(PRAWNOS_BUILD_SHARED)
	tar -xvf $(ATH9K_TAR) -C $(PRAWNOS_BUILD_SHARED)
	touch $(ATH9K_EXTRACTED)

$(ATH9K_BUILT): $(ATH9K_EXTRACTED)
	rm -rf $(ATH9K_BUILD_LOG)
	$(PRAWNOS_KERNEL_SCRIPTS_BUILD_ATH9K) $(PRAWNOS_ATH9K_BUILD) 2>&1 | tee $(ATH9K_BUILD_LOG)

$(KERNEL_ATH9K_INSTALLED): $(KERNEL_PATCHED) $(ATH9K_BUILT) | $(KERNEL_ATH9K_FIRMWARES)
	cp $(ATH9K_9271_FW) $(KERNEL_ATH9K_FIRMWARES)/
	cp $(ATH9K_7010_FW) $(KERNEL_ATH9K_FIRMWARES)/

$(PRAWNOS_KERNEL_BUILT): $(KERNEL_ATH9K_INSTALLED) $(PRAWNOS_INITRAMFS_IMAGE) $(KERNEL_CONFIG_GENERATED)
# rebuilding the kernel means we also need to rebuild the kernel package
	$(MAKE) -C $(PRAWNOS_KERNEL_PACKAGE_IMAGE) clean
	rm -rf $(KERNEL_BUILD_LOG)
	$(PRAWNOS_KERNEL_SCRIPTS_BUILD) $(KVER) $(KERNEL_RESOURCES) $(PRAWNOS_KERNEL_BUILD) $(PRAWNOS_INITRAMFS_IMAGE) $(TARGET) $(KERNEL_CONFIG) 2>&1 | tee $(KERNEL_BUILD_LOG)

endif ## KERNEL_MK
